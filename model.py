# -*- coding: utf-8 -*-
"""mnist_tf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vCrYSUrTAjLwAQQcq3muY8MS_XkVrajo

# ML Model to Classify Numbers using MNIST DataSet

## Importing Libraries
"""
import tensorflow
from keras import Sequential
from keras.layers import Dense
from keras.utils import np_utils
from keras.datasets import mnist

"""## Loading data"""

(X_train, y_train), (X_test, y_test) = mnist.load_data()
print ("X_train.shape: {}".format(X_train.shape))
print ("y_train.shape: {}".format(y_train.shape))
print ("X_test.shape: {}".format(X_test.shape))
print ("y_test.shape: {}".format(y_test.shape))

"""## Normalize Inputs from 0–255 to 0–1"""

X_train = X_train / 255
X_test = X_test / 255

"""## One-Hot Encode outputs"""

y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = 10

def adapt_data(x):
  return x.reshape(x.shape[0], x.shape[1] * x.shape[2] ).astype('float32')

"""## Training model"""

model = Sequential()

model.add(Dense(28 * 28, input_dim=28 * 28, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer='adam', metrics=['accuracy'])


model.fit(adapt_data(X_train), y_train,
          validation_data=(adapt_data(X_test), y_test))


"""## Save Model"""

model.save('model.h5')

exit()